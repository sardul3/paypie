name: CI Test [Mutation, Coverage, Integration and More]

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ github.sha }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🧱 Make gradlew executable
        run: chmod +x gradlew

      - name: ☕ Set up Java 21
        id: setup-java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 💾 Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: 🧠 Verify Java and Gradle
        run: |
          java -version
          ./gradlew --version

  unit-tests:
    needs: setup
    runs-on: ubuntu-latest
    continue-on-error: true
    name: 🧪 Unit Tests
    steps:
      - uses: actions/checkout@v4
      - run: chmod +x gradlew
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run Unit Tests
        run: ./gradlew test -Djunit.jupiter.tags.exclude=integration

      - name: 📊 Generate JaCoCo Report
        run: ./gradlew jacocoTestReport

      - name: ☂️ Generate Layered Coverage Badges
        uses: cicirello/jacoco-badge-generator@v2
        with:
          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv
          classes-to-analyze: |
            io.github.sardul3.domain.*
            io.github.sardul3.application.*
            io.github.sardul3.adapter.*
          badge-directory: .github/badges

      - uses: actions/upload-artifact@v4
        with:
          name: coverage-badges
          path: .github/badges

      - uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: build/reports/tests/test/

  integration-tests:
    needs: setup
    runs-on: ubuntu-latest
    continue-on-error: true
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports: [5432:5432]
        options: >-
          --health-cmd "pg_isready -U test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    name: 🔌 Integration Tests (Testcontainers)
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
      SPRING_DATASOURCE_USERNAME: test
      SPRING_DATASOURCE_PASSWORD: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run Integration Tests
        run: ./gradlew integrationTest
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.path }}

      - uses: actions/upload-artifact@v4
        with:
          name: integration-test-report
          path: build/reports/tests/test/

  mutation-tests:
    needs: setup
    runs-on: ubuntu-latest
    continue-on-error: true
    name: 🔬 PIT Mutation Tests
    steps:
      - uses: actions/checkout@v4
      - run: chmod +x gradlew
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 🧬 Run PIT
        run: ./gradlew pitest

      - name: 📄 Parse mutation-report.xml and generate summary + badge
        run: |
          FILE="build/reports/pitest/mutations.xml"
          SUMMARY_DIR="mutation-summary"
          BADGE_DIR=".github/badges"
          mkdir -p "$SUMMARY_DIR" "$BADGE_DIR"

          if [[ -f "$FILE" ]]; then
            TOTAL=$(grep -c "<mutation " "$FILE")
            KILLED=$(grep "status='KILLED'" "$FILE" | wc -l)
            SURVIVED=$(grep "status='SURVIVED'" "$FILE" | wc -l)

            if [ "$TOTAL" -gt 0 ]; then
              RATE=$(echo "scale=2; ($KILLED / $TOTAL) * 100" | bc)
            else
              RATE="0.00"
            fi

            # Markdown summary
            {
              echo "### PIT Mutation Summary"
              echo ""
              echo "- ✅ Total Mutants: **$TOTAL**"
              echo "- 🧪 Killed: **$KILLED**"
              echo "- ⚠️ Survived: **$SURVIVED**"
              echo "- 🎯 Mutation Score: **$RATE%**"
            } > "$SUMMARY_DIR/summary.md"

            # Badge
            echo "![mutation](https://img.shields.io/badge/Mutation-${RATE}%25-brightgreen)" > "$BADGE_DIR/mutation-badge.md"

            echo "✅ Generated mutation summary and badge at: $SUMMARY_DIR + $BADGE_DIR"
          else
            echo "⚠️ No mutation-report.xml found"
            echo "No mutation-report.xml found" > "$SUMMARY_DIR/summary.md"
            echo "![mutation](https://img.shields.io/badge/Mutation-unknown-lightgrey)" > "$BADGE_DIR/mutation-badge.md"
          fi

      - name: 📂 Upload mutation HTML report
        uses: actions/upload-artifact@v4
        with:
          name: mutation-html-report
          path: build/reports/pitest/

      - name: 🗃️ Upload summary + badge
        uses: actions/upload-artifact@v4
        with:
          name: mutation-summary-badges
          path: |
            mutation-summary/summary.md
            .github/badges/mutation-badge.md

  store-badges:
    needs: [unit-tests, mutation-tests]
    runs-on: ubuntu-latest
    name: 🗃️ Store Combined Badges
    steps:
      - uses: actions/checkout@v4

      - name: Download coverage badges
        uses: actions/download-artifact@v4
        with:
          name: coverage-badges
          path: .github/badges

      - name: Download mutation badges
        uses: actions/download-artifact@v4
        with:
          name: mutation-badges
          path: .github/badges

      - name: Copy badge files to archive directory
        run: |
          mkdir -p badges
          if compgen -G ".github/badges/*" > /dev/null; then
            cp .github/badges/* badges/
          else
            echo "No badge files found to copy."
          fi

      - name: 📦 Archive all badges
        uses: actions/upload-artifact@v4
        with:
          name: combined-badges
          path: badges

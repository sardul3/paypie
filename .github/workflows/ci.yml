name: CI Test [Mutation, Coverage, Integration and More]

on:
#  push:
#    branches: [main]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: chmod +x gradlew
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

  unit-tests:
    needs: setup
    runs-on: ubuntu-latest
    continue-on-error: true
    name: üß™ Unit Tests
    steps:
      - uses: actions/checkout@v4
      - run: chmod +x gradlew
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run Unit Tests
        run: ./gradlew test

      - name: üìä Generate JaCoCo Report
        run: ./gradlew jacocoTestReport

      - name: Generate JaCoCo badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          badges-directory: .github/badges
          generate-branches-badge: true
          generate-summary: true
          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv

      - name: Log coverage percentages to workflow output
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branches = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report as a workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Commit and push the coverage badges and summary file
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd .github/badges
          if [[ `git status --porcelain *.svg *.json` ]]; then
            git config --global user.name 'github-actions'
            git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
            git add *.svg *.json
            git commit -m "Autogenerated JaCoCo coverage badges" *.svg *.json
            git push
          fi

      - name: Comment on PR with coverage percentages
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          REPORT=$(<badges/coverage-summary.json)
          COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
          BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
          NEWLINE=$'\n'
          BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
          gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  mutation-tests:
    needs: setup
    runs-on: ubuntu-latest
    continue-on-error: true
    name: üî¨ PIT Mutation Tests
    steps:
      - uses: actions/checkout@v4
      - run: chmod +x gradlew
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: üß¨ Run PIT
        run: ./gradlew pitest

      - name: üìÑ Generate mutation summary and badge
        run: |
          FILE="build/reports/pitest/mutations.xml"
          SUMMARY_DIR="mutation-summary"
          BADGE_DIR=".github/badges"
          mkdir -p "$SUMMARY_DIR" "$BADGE_DIR"

          if [[ -f "$FILE" ]]; then
            TOTAL=$(grep -c "<mutation " "$FILE")
            KILLED=$(grep "status='KILLED'" "$FILE" | wc -l)
            SURVIVED=$(grep "status='SURVIVED'" "$FILE" | wc -l)

            if [ "$TOTAL" -gt 0 ]; then
              RATE=$(echo "scale=2; ($KILLED / $TOTAL) * 100" | bc)
            else
              RATE="0.00"
            fi

            COLOR="brightgreen"
            if (( $(echo "$RATE < 90" | bc -l) )); then COLOR="yellow"; fi
            if (( $(echo "$RATE < 70" | bc -l) )); then COLOR="orange"; fi
            if (( $(echo "$RATE < 50" | bc -l) )); then COLOR="red"; fi

            # Create summary
            {
              echo "### PIT Mutation Summary"
              echo ""
              echo "- ‚úÖ Total Mutants: **$TOTAL**"
              echo "- üß™ Killed: **$KILLED**"
              echo "- ‚ö†Ô∏è Survived: **$SURVIVED**"
              echo "- üéØ Mutation Score: **$RATE%**"
            } > "$SUMMARY_DIR/summary.md"

            # Generate SVG badge
            BADGE_PATH="$BADGE_DIR/mutation.svg"
            echo '<?xml version="1.0" encoding="UTF-8"?>' > $BADGE_PATH
            echo "<svg xmlns='http://www.w3.org/2000/svg' width='120' height='20'><rect width='120' height='20' fill='#555'/><rect x='60' width='60' height='20' fill='$COLOR'/><text x='30' y='14' fill='#fff' font-family='Verdana' font-size='11'>mutation</text><text x='80' y='14' fill='#000' font-family='Verdana' font-size='11'>$RATE%</text></svg>" >> $BADGE_PATH

          else
            echo "No mutation-report.xml found" > "$SUMMARY_DIR/summary.md"
            echo '<svg xmlns="http://www.w3.org/2000/svg" width="120" height="20"><rect width="120" height="20" fill="#9f9f9f"/><text x="10" y="14" fill="#fff" font-family="Verdana" font-size="11">Mutation Unknown</text></svg>' > "$BADGE_DIR/mutation.svg"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: mutation-summary
          path: mutation-summary/summary.md

      - uses: actions/upload-artifact@v4
        with:
          name: mutation-badge
          path: .github/badges/mutation.svg

  store-badges:
    needs: [mutation-tests]
    runs-on: ubuntu-latest
    name: üóÉÔ∏è Store Combined Badges
    steps:
      - uses: actions/checkout@v4

      - name: Download mutation badge
        uses: actions/download-artifact@v4
        with:
          name: mutation-badge
          path: .github/badges

      - name: Download mutation badge
        uses: actions/download-artifact@v4
        with:
          name: mutation-badge
          path: mutation-badge-temp

      - name: Copy badge to .github/badges
        run: |
          mkdir -p .github/badges
          cp mutation-badge-temp/mutation-badge.md .github/badges/

      - name: Archive all badges
        uses: actions/upload-artifact@v4
        with:
          name: combined-badges
          path: .github/badges

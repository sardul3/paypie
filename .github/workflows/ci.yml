name: CI Test [Mutation, Coverage, Integration and More]

on:
  #  push:
  #    branches: [main]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: chmod +x gradlew
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

  unit-tests:
    needs: setup
    runs-on: ubuntu-latest
    continue-on-error: true
    name: 🧪 Unit Tests
    steps:
      - uses: actions/checkout@v4
      - run: chmod +x gradlew
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run Unit Tests
        run: ./gradlew test

      - name: 📊 Generate JaCoCo Report
        run: ./gradlew jacocoTestReport

      - name: Generate JaCoCo badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          badges-directory: .github/badges
          generate-branches-badge: true
          generate-summary: true
          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv

      - name: Log coverage percentages to workflow output
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branches = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report as a workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Commit and push the coverage badges and summary file
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd .github/badges
          if [[ `git status --porcelain *.svg *.json` ]]; then
            git config --global user.name 'github-actions'
            git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
            git add *.svg *.json
            git commit -m "Autogenerated JaCoCo coverage badges" *.svg *.json
            git push
          fi

      - name: Comment on PR with coverage percentages
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          REPORT=$(<badges/coverage-summary.json)
          COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
          BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
          NEWLINE=$'\n'
          BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
          gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  mutation-tests:
    needs: setup
    runs-on: ubuntu-latest
    continue-on-error: true
    name: 🔬 PIT Mutation Tests
    steps:
      - uses: actions/checkout@v4

      - run: chmod +x gradlew

      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 🧬 Run PIT
        run: ./gradlew pitest

      - name: 📄 Generate mutation summary and SVG badge
        run: |
          FILE="build/reports/pitest/mutations.xml"
          SUMMARY_DIR="mutation-summary"
          BADGE_DIR=".github/badges"
          mkdir -p "$SUMMARY_DIR" "$BADGE_DIR"
          
          if [[ -f "$FILE" ]]; then
            TOTAL=$(grep -c "<mutation " "$FILE")
            KILLED=$(grep "status='KILLED'" "$FILE" | wc -l)
            SURVIVED=$(grep "status='SURVIVED'" "$FILE" | wc -l)
          
            if [ "$TOTAL" -gt 0 ]; then
              RATE=$(echo "scale=2; ($KILLED / $TOTAL) * 100" | bc)
            else
              RATE="0.00"
            fi
          
            COLOR="#4c1"
            TEXT="#ffffff"
            if (( $(echo "$RATE < 90" | bc -l) )); then COLOR="#dfb317"; TEXT="#000000"; fi
            if (( $(echo "$RATE < 75" | bc -l) )); then COLOR="#fe7d37"; TEXT="#000000"; fi
            if (( $(echo "$RATE < 50" | bc -l) )); then COLOR="#e05d44"; TEXT="#ffffff"; fi
          
            {
              echo "### PIT Mutation Summary"
              echo ""
              echo "- ✅ Total Mutants: **$TOTAL**"
              echo "- 🧪 Killed: **$KILLED**"
              echo "- ⚠️ Survived: **$SURVIVED**"
              echo "- 🎯 Mutation Score: **$RATE%**"
            } > "$SUMMARY_DIR/summary.md"
          
            # Safe way to echo multi-line XML
            cat <<EOF > "$BADGE_DIR/mutation.svg"
            <?xml version="1.0" encoding="UTF-8"?>
          <svg xmlns="http://www.w3.org/2000/svg" width="140" height="20" role="img" aria-label="mutation: ${RATE}%">
            <linearGradient id="b" x2="0" y2="100%">
            <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
            <stop offset="1" stop-opacity=".1"/>
            </linearGradient>
            <mask id="a">
            <rect width="140" height="20" rx="3" fill="#fff"/>
            </mask>
            <g mask="url(#a)">
            <rect width="75" height="20" fill="#555"/>
            <rect x="75" width="65" height="20" fill="${COLOR}"/>
            <rect width="140" height="20" fill="url(#b)"/>
            </g>
            <g fill="${TEXT}" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" font-size="11">
            <text x="38" y="14" dominant-baseline="middle">mutation</text>
            <text x="105" y="14" dominant-baseline="middle">${RATE}%</text>
            </g>
            </svg>
            EOF
  
          else
            echo "No mutation-report.xml found" > "$SUMMARY_DIR/summary.md"
  
          cat <<EOF > "$BADGE_DIR/mutation.svg"
          <?xml version="1.0" encoding="UTF-8"?>
        <svg xmlns="http://www.w3.org/2000/svg" width="140" height="20" role="img" aria-label="mutation: unknown">
          <rect width="140" height="20" fill="#9f9f9f"/>
          <text x="70" y="14" fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" font-size="11" dominant-baseline="middle">Mutation Unknown</text>
          </svg>
          EOF
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: mutation-summary
          path: mutation-summary/summary.md

      - uses: actions/upload-artifact@v4
        with:
          name: mutation-badge
          path: .github/badges/mutation.svg

